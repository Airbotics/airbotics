generator client {
    provider            = "prisma-client-js"
    previewFeatures     = ["interactiveTransactions"]
}

datasource db {
    provider            = "postgresql"
    url                 = env("POSTGRES_CONN_STR")
}

// upload status of an object/image
enum UploadStatus {
    uploading
    uploaded
}

// type of tuf repo
enum TUFRepo {
    director
    image
}

// type of tuf role
enum TUFRole {
    root
    targets
    snapshot
    timestamp
}

// namespace to contain all resources (metadata, ecus, manifests, images, etc.) related to the same project
model Namespace {
    id                  String          @id @default(uuid()) @unique

    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    refs                Ref[]
    objects             Object[]
    images              Image[]
    metadata            Metadata[]
    robots              Robot[]

    @@map("namespaces")
}


// ostree references
model Ref {
    name                String                                  // `/heads/main` or similar
    commit              String                                  // commit hash
    object_id           String                                  // object it points to
    namespace_id        String

    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    object              Object          @relation(fields: [namespace_id, object_id], references: [namespace_id, object_id], onDelete: Cascade)
    namespace           Namespace       @relation(fields: [namespace_id], references: [id], onDelete: Cascade)

    @@id([namespace_id, name])
    @@map("refs")
}

// ostree object
model Object {
    object_id           String
    namespace_id        String
    size                Int                                     // size of object in bytes
    status              UploadStatus

    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    refs                Ref[]
    namespace           Namespace       @relation(fields: [namespace_id], references: [id], onDelete: Cascade)

    @@id([namespace_id, object_id])
    @@map("objects")
}


// images stored in image repo
model Image {
    id                  String          @default(uuid())
    namespace_id        String
    size                Int                                     // size of image in bytes
    sha256              String          @unique                 // sha256 hash of image
    sha512              String          @unique                 // sha512 hash of image
    status              UploadStatus                            // uploading or uploaded

    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    namespace           Namespace       @relation(fields: [namespace_id], references: [id], onDelete: Cascade)

    @@id([namespace_id, id])
    @@map("images")
}

// tuf metadata
// NOTE this may be moved to mongo
model Metadata {
    id                  String          @default(uuid())
    namespace_id        String
    role                TUFRole         // director or image repo
    repo                TUFRepo         // root, targets, snapshot or timestamp
    version             Int             // must match the version in the signed portion of the metadata
    value               Json            // holds entire signed metadata

    created_at          DateTime        @default(now())
    namespace           Namespace       @relation(fields: [namespace_id], references: [id], onDelete: Cascade)

    @@id([namespace_id, id])
    @@unique([namespace_id, repo, role, version])
    @@map("metadata")
}

// robots on which Airbotics will update software
// these are called vehicles in the Update spec
model Robot {
    id                  String
    namespace_id        String

    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    namespace           Namespace       @relation(fields: [namespace_id], references: [id], onDelete: Cascade)

    @@id([namespace_id, id])
    @@map("robots")
}