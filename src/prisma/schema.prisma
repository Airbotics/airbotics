generator client {
    provider            = "prisma-client-js"
    previewFeatures     = ["interactiveTransactions"]
}

datasource db {
    provider            = "postgresql"
    url                 = env("POSTGRES_CONN_STR")
}

// upload status of an object/image
enum UploadStatus {
    uploading
    uploaded
}

// type of tuf repo
enum TUFRepo {
    director
    image
}

// type of tuf role
enum TUFRole {
    root
    targets
    snapshot
    timestamp
}


// namespace to contain all resources (metadata, ecus, manifests, images, etc.) related to the same project
model Namespace {
    id                  String          @id @default(uuid()) @unique

    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    refs                Ref[]
    objects             Object[]
    images              Image[]
    metadata            Metadata[]
    robots              Robot[]
    ecus                Ecu[]
    robot_manifests     RobotManifest[]

    @@map("namespaces")
}


// images stored in image repo
model Image {
    id                  String          @id @default(uuid()) @unique
    namespace_id        String
    size                Int                                     // size of image in bytes
    sha256              String          @unique                 // sha256 hash of image
    sha512              String          @unique                 // sha512 hash of image
    status              UploadStatus                            // uploading or uploaded

    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    namespace           Namespace       @relation(fields: [namespace_id], references: [id], onDelete: Cascade)

    tmp_ecu_images      TmpEcuImages[]

    @@unique([namespace_id, id])
    @@map("images")
}


// tuf metadata
model Metadata {
    id                  String          @default(uuid())
    namespace_id        String
    robot_id            String?
    role                TUFRole                                 // director or image repo
    repo                TUFRepo                                 // root, targets, snapshot or timestamp
    version             Int                                     // must match the version in the signed portion of the metadata
    value               Json                                    // holds entire signed metadata

    created_at          DateTime        @default(now())
    expires_at          DateTime                                // this should always match the 'expires' field in the signed portion

    namespace           Namespace       @relation(fields: [namespace_id], references: [id], onDelete: Cascade)
    robot               Robot?          @relation(fields: [robot_id], references: [id], onDelete: Cascade)
    

    @@id([namespace_id, id])
    @@unique([namespace_id, repo, role, version])
    @@map("metadata")
}


// robots on which Airbotics will update software
// these are called vehicles in the Update spec
// TODO
// - provisioned - compound attribute, whether all ecus have provisioned
model Robot {
    id                  String          @id @default(uuid()) @unique
    namespace_id        String

    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    namespace           Namespace       @relation(fields: [namespace_id], references: [id], onDelete: Cascade)

    ecus                Ecu[]
    robot_manifests     RobotManifest[]
    metadata            Metadata[]

    @@unique([namespace_id, id])
    @@map("robots")
}


// ecus on robots
// NOTE we could potentially remove the namespace id here
// TODO 
// - last_seen
model Ecu {
    id                  String          @id @default(uuid()) @unique
    namespace_id        String
    robot_id            String
    provisioned         Boolean         @default(false)     // whether the ecu has completed provisioning
    primary             Boolean                             // whether this ecu is the primary, only one per robot is supported

    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    namespace           Namespace       @relation(fields: [namespace_id], references: [id], onDelete: Cascade)
    robot               Robot           @relation(fields: [namespace_id, robot_id], references: [namespace_id, id], onDelete: Cascade)

    tmp_ecu_images      TmpEcuImages[]


    @@unique([namespace_id, id])
    @@map("ecus")
}


// robot manifests sent by primaries
model RobotManifest {
    id                  String          @default(uuid())
    namespace_id        String
    robot_id            String
    value               Json            // holds entire signed manifest
    valid               Boolean

    created_at          DateTime        @default(now())

    namespace           Namespace       @relation(fields: [namespace_id], references: [id], onDelete: Cascade)
    robot               Robot           @relation(fields: [namespace_id, robot_id], references: [namespace_id, id], onDelete: Cascade)

    @@id([namespace_id, id])
    @@map("robot_manifests")
}



// ostree references
model Ref {
    name                String                                  // `/heads/main` or similar
    commit              String                                  // commit hash
    object_id           String                                  // object it points to
    namespace_id        String

    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    object              Object          @relation(fields: [namespace_id, object_id], references: [namespace_id, object_id], onDelete: Cascade)
    namespace           Namespace       @relation(fields: [namespace_id], references: [id], onDelete: Cascade)

    @@id([namespace_id, name])
    @@map("refs")
}


// ostree object
model Object {
    object_id           String
    namespace_id        String
    size                Int                                     // size of object in bytes
    status              UploadStatus

    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    refs                Ref[]
    namespace           Namespace       @relation(fields: [namespace_id], references: [id], onDelete: Cascade)

    @@id([namespace_id, object_id])
    @@map("objects")
}



// TODO this is a temporary table
model TmpEcuImages {
    ecu_id              String
    image_id            String

    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt
    acknowledged        Boolean         @default(false)

    ecu                 Ecu             @relation(fields: [ecu_id], references: [id], onDelete: Cascade)
    image               Image           @relation(fields: [image_id], references: [id], onDelete: Cascade)

    @@unique([ecu_id, image_id])
    @@map("tmp_ecu_images")
}