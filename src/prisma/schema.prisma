generator client {
    provider            = "prisma-client-js"
    previewFeatures     = ["interactiveTransactions"]
}

datasource db {
    provider            = "postgresql"
    url                 = env("POSTGRES_CONN_STR")
}

enum ObjectStatus {
    uploading
    uploaded
}


// namespace to contain all resources (metadata, ecus, manifests, images, etc.) related to the same project
model Namespace {
    id                  String          @id @default(uuid()) @unique

    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    refs                Ref[]
    objects             Object[]
    images              Image[]

    @@map("namespaces")
}


// ostree references
model Ref {
    name                String
    commit              String
    namespace_id        String
    object_id           String

    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    object              Object          @relation(fields: [namespace_id, object_id], references: [namespace_id, object_id], onDelete: Cascade)
    namespace           Namespace       @relation(fields: [namespace_id], references: [id], onDelete: Cascade)

    @@id([namespace_id, name])
    @@map("refs")
}

// ostree object
model Object {
    object_id           String
    namespace_id        String
    size                Int
    status              ObjectStatus

    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    refs                Ref[]
    namespace           Namespace       @relation(fields: [namespace_id], references: [id], onDelete: Cascade)

    @@id([namespace_id, object_id])
    @@map("objects")
}


// images stored in image repo
model Image {
    id                  String          @default(uuid())
    namespace_id        String
    size                Int
    sha256              String          @unique
    sha512              String          @unique
    status              ObjectStatus

    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    namespace           Namespace       @relation(fields: [namespace_id], references: [id], onDelete: Cascade)

    @@id([namespace_id, id])
    @@map("images")
}

// tuf metadata
// TODO should include which type of repo this belongs to, which should be an enum
// TODO move this to mongo
// TODO if we keep it in postgres then make type an enum
model Metadata {
    id                  String          @default(uuid())
    namespace_id        String
    type                String          // TODO enum
    version             Int
    value               Json            // holds entire signed metadata

    created_at          DateTime        @default(now())

    @@id([namespace_id, id])
    @@unique([namespace_id, type, version])
    @@map("metadata")
}